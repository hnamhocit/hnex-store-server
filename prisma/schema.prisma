// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

enum Role {
	USER
	SELLER
	ADMIN
}

model User {
	id String @id @default(uuid())
	email String @unique
	username String? @unique
	emailVerified Boolean @default(false)
	role Role @default(USER)
	displayName String
	refreshToken String?
	password String
	photoURL String?
	backgroundURL String?
	activationCode String?
	actionationCodeExpiredIn DateTime?
	media Media[]
	posts Post[]
	comments Comment[]
	reactions Reaction[]
	followedBy Follows[] @relation("followedBy")
	following  Follows[] @relation("following")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Follows {
	followedBy   User @relation("followedBy", fields: [followedById], references: [id])
	followedById String
	following    User @relation("following", fields: [followingId], references: [id])
	followingId  String

	@@id([followingId, followedById])
}

enum MediaType {
	IMAGE
	VIDEO
	DOCUMENT
}

model Post {
    id String @id @default(uuid())
    content String
    user User @relation(fields: [userId], references: [id])
    userId String
    reactions Reaction[]
    comments Comment[]
    media Media[] @relation("PostMedia") // Thêm mối quan hệ với Media
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Media {
    id String @id @default(uuid())
    buffer Bytes
    contentType String
    name String
    size Int
    type MediaType
    userId String
    user User @relation(fields: [userId], references: [id])
    postId String? // Thay đổi thành nullable
    post Post? @relation("PostMedia", fields: [postId], references: [id]) // Thay đổi thành nullable
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Comment {
	id String @id @default(uuid())
	replies Comment[] @relation("CommentReplies")
	parentCommentId String?
	parentComment Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
	content String
	postId String
	post Post @relation(fields: [postId], references: [id])
	userId String
	user User @relation(fields: [userId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}


model Reaction {
	id String @id @default(uuid())
	name String
	postId String
	post Post @relation(fields: [postId], references: [id])
	userId String
	user User @relation(fields: [userId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}