// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SELLER
  ADMIN
}

model User {
  id String @id @default(uuid())
  email String @unique
  username String? @unique
  emailVerified Boolean @default(false)
  role Role @default(USER)
  displayName String
  refreshToken String?
  password String
  photoURL String?
  backgroundURL String?
  activationCode String?
  actionationCodeExpiredIn DateTime?
  uploads Upload[]
  posts Post[]
  comments Comment[]
  reactions Reaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upload {
	id String @id @default(uuid())
	buffer Bytes
	contentType String
	name String
	size Int
	userId String
	user User @relation(fields: [userId], references: [id])
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(uuid())
  content String
  imageIds String[]
  user User @relation(fields: [userId], references: [id])
  userId String
  reactions Reaction[]
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
	id String @id @default(uuid())
	content String
	postId String
	post Post @relation(fields: [postId], references: [id])
	userId String
	user User @relation(fields: [userId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}


model Reaction {
	id String @id @default(uuid())
	name String
	postId String
	post Post @relation(fields: [postId], references: [id])
	userId String
	user User @relation(fields: [userId], references: [id])
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}